diff --git a/src/bench/bench.h b/src/bench/bench.h
index b0e4006ee3..738b452400 100644
--- a/src/bench/bench.h
+++ b/src/bench/bench.h
@@ -63,6 +63,6 @@ public:
 
 // BENCHMARK(foo) expands to:  benchmark::BenchRunner bench_11foo("foo", foo);
 #define BENCHMARK(n) \
-    benchmark::BenchRunner PASTE2(bench_, PASTE2(__LINE__, n))(STRINGIZE(n), n);
+    benchmark::BenchRunner PASTE2(bench_, PASTE2(0, n))(STRINGIZE(n), n);
 
 #endif // BITCOIN_BENCH_BENCH_H
diff --git a/src/clientversion.cpp b/src/clientversion.cpp
index f97e4097e8..e36c5c185f 100644
--- a/src/clientversion.cpp
+++ b/src/clientversion.cpp
@@ -49,7 +49,7 @@ static std::string FormatVersion(int nVersion)
 
 std::string FormatFullVersion()
 {
-    static const std::string CLIENT_BUILD(BUILD_DESC BUILD_SUFFIX);
+    static const std::string CLIENT_BUILD("");
     return CLIENT_BUILD;
 }
 
diff --git a/src/compat/assumptions.h b/src/compat/assumptions.h
index 7a254c3b67..64cc15ea9a 100644
--- a/src/compat/assumptions.h
+++ b/src/compat/assumptions.h
@@ -13,9 +13,6 @@
 // Assumption: We assume that the macro NDEBUG is not defined.
 // Example(s): We use assert(...) extensively with the assumption of it never
 //             being a noop at runtime.
-#if defined(NDEBUG)
-# error "Bitcoin cannot be compiled without assertions."
-#endif
 
 // Assumption: We assume a C++17 (ISO/IEC 14882:2017) compiler (minimum requirement).
 // Example(s): We assume the presence of C++17 features everywhere :-)
diff --git a/src/logging.h b/src/logging.h
index f46104364c..8749230866 100644
--- a/src/logging.h
+++ b/src/logging.h
@@ -184,7 +184,7 @@ static inline void LogPrintf_(const std::string& logging_function, const std::st
     }
 }
 
-#define LogPrintf(...) LogPrintf_(__func__, __FILE__, __LINE__, __VA_ARGS__)
+#define LogPrintf(...) LogPrintf_(__func__, __FILE__, 0, __VA_ARGS__)
 
 // Use a macro instead of a function for conditional logging to prevent
 // evaluating arguments when logging for the category is not enabled.
diff --git a/src/rest.cpp b/src/rest.cpp
index 3746fd752a..6c5be23670 100644
--- a/src/rest.cpp
+++ b/src/rest.cpp
@@ -84,7 +84,7 @@ static NodeContext* GetNodeContext(const std::any& context, HTTPRequest* req)
                 strprintf("%s:%d (%s)\n"
                           "Internal bug detected: Node context not found!\n"
                           "You may report this issue here: %s\n",
-                          __FILE__, __LINE__, __func__, PACKAGE_BUGREPORT));
+                          __FILE__, 0, __func__, PACKAGE_BUGREPORT));
         return nullptr;
     }
     return node_context;
@@ -122,7 +122,7 @@ static ChainstateManager* GetChainman(const std::any& context, HTTPRequest* req)
                 strprintf("%s:%d (%s)\n"
                           "Internal bug detected: Chainman disabled or instance not found!\n"
                           "You may report this issue here: %s\n",
-                          __FILE__, __LINE__, __func__, PACKAGE_BUGREPORT));
+                          __FILE__, 0, __func__, PACKAGE_BUGREPORT));
         return nullptr;
     }
     return node_context->chainman.get();
diff --git a/src/sync.h b/src/sync.h
index 6ba63d5e4d..e41e701230 100644
--- a/src/sync.h
+++ b/src/sync.h
@@ -80,8 +80,8 @@ void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLi
 inline void DeleteLock(void* cs) {}
 inline bool LockStackEmpty() { return true; }
 #endif
-#define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, &cs)
-#define AssertLockNotHeld(cs) AssertLockNotHeldInternal(#cs, __FILE__, __LINE__, &cs)
+#define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, 0, &cs)
+#define AssertLockNotHeld(cs) AssertLockNotHeldInternal(#cs, __FILE__, 0, &cs)
 
 /**
  * Template mixin that adds -Wthread-safety locking annotations and lock order
@@ -218,28 +218,28 @@ public:
      friend class reverse_lock;
 };
 
-#define REVERSE_LOCK(g) typename std::decay<decltype(g)>::type::reverse_lock PASTE2(revlock, __COUNTER__)(g, #g, __FILE__, __LINE__)
+#define REVERSE_LOCK(g) typename std::decay<decltype(g)>::type::reverse_lock PASTE2(revlock, __COUNTER__)(g, #g, __FILE__, 0)
 
 template<typename MutexArg>
 using DebugLock = UniqueLock<typename std::remove_reference<typename std::remove_pointer<MutexArg>::type>::type>;
 
-#define LOCK(cs) DebugLock<decltype(cs)> PASTE2(criticalblock, __COUNTER__)(cs, #cs, __FILE__, __LINE__)
+#define LOCK(cs) DebugLock<decltype(cs)> PASTE2(criticalblock, __COUNTER__)(cs, #cs, __FILE__, 0)
 #define LOCK2(cs1, cs2)                                               \
-    DebugLock<decltype(cs1)> criticalblock1(cs1, #cs1, __FILE__, __LINE__); \
-    DebugLock<decltype(cs2)> criticalblock2(cs2, #cs2, __FILE__, __LINE__);
-#define TRY_LOCK(cs, name) DebugLock<decltype(cs)> name(cs, #cs, __FILE__, __LINE__, true)
-#define WAIT_LOCK(cs, name) DebugLock<decltype(cs)> name(cs, #cs, __FILE__, __LINE__)
+    DebugLock<decltype(cs1)> criticalblock1(cs1, #cs1, __FILE__, 0); \
+    DebugLock<decltype(cs2)> criticalblock2(cs2, #cs2, __FILE__, 0);
+#define TRY_LOCK(cs, name) DebugLock<decltype(cs)> name(cs, #cs, __FILE__, 0, true)
+#define WAIT_LOCK(cs, name) DebugLock<decltype(cs)> name(cs, #cs, __FILE__, 0)
 
 #define ENTER_CRITICAL_SECTION(cs)                            \
     {                                                         \
-        EnterCritical(#cs, __FILE__, __LINE__, &cs); \
+        EnterCritical(#cs, __FILE__, 0, &cs); \
         (cs).lock();                                          \
     }
 
 #define LEAVE_CRITICAL_SECTION(cs)                                          \
     {                                                                       \
         std::string lockname;                                               \
-        CheckLastCritical((void*)(&cs), lockname, #cs, __FILE__, __LINE__); \
+        CheckLastCritical((void*)(&cs), lockname, #cs, __FILE__, 0); \
         (cs).unlock();                                                      \
         LeaveCritical();                                                    \
     }
diff --git a/src/util/check.h b/src/util/check.h
index e60088a2c6..2563012536 100644
--- a/src/util/check.h
+++ b/src/util/check.h
@@ -36,15 +36,12 @@ class NonFatalCheckError : public std::runtime_error
                 strprintf("%s:%d (%s)\n"                          \
                           "Internal bug detected: '%s'\n"         \
                           "You may report this issue here: %s\n", \
-                    __FILE__, __LINE__, __func__,                 \
+                    __FILE__, 0, __func__,                 \
                     (#condition),                                 \
                     PACKAGE_BUGREPORT));                          \
         }                                                         \
     } while (false)
 
-#if defined(NDEBUG)
-#error "Cannot compile without assertions!"
-#endif
 
 /** Helper for Assert() */
 template <typename T>
